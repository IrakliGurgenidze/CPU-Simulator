#include <deque>
#include <set>

#include "Process.h"
#include "Burst.h"
#include "Calculator.h"

struct simstats {
    int total_burst = 0;
    int burst_count = 0;
    int total_wait = 0;
    int wait_count = 0;
    int total_turn = 0;
    int context_count = 0;
    int preemption_count = 0;
    int elapsed_time = 0;
};

class CPU {
    private:
        //holds all processes in ready queue (by default FIFO)
        std::deque<Process*> ready_queue;

        //holds all processes on a IO burst (by default not sorted)
        std::set<Process*, CompareProcessAlpha> waiting;

        //holds all processes that have not arrived yet (by defualt not sorted)
        std::set<Process*> not_arrived;

        //holds the process that is currently running
        Process* running;

        //holds any process that is either switching from ready to running or running to waiting
        Process* switching;

        //the total time the program has run
        int elapsed_time;

        //holds the values needed for final stats calculation
        simstats stats;

        //represents the scheduling algorithm used 
        int algo_index;

        //the time is takes for a context switch (must be an even number)
        int tcs;

        //the time slice for round robin
        int tslice;
        int cur_slice;

        //set to 0 if switching buffer is empty, 1 if process is switching in, -1 if process is switching out
        int flout;

        //decrements the running processes front burst
        void run();

        //checks if any processes in waiting must be moved to switching, or switching must be moved to running
        void switchIn();

        //finishes switching in a process into running
        void switchFinish();

        //checks if running process must be moved to switching, or switching must be moved to waiting
        void switchOut();
        
        //
        void preemptSwitchout();

        //checks if any waiting processes must be moved to ready
        void wait();

        //checks if any non-arrived processes must be moved to ready
        void arrivals();

        //returns char* array of queue
        char* printQueue();

    public:

        CPU(int algo_index_, int tcs_, int tslice_);

        //populates not_arrived with all processes that can be generated by given variables
        void generateProcesses(int n, int seed, int ubound, double lambda, double alpha);

        void printProcesses();

        //runs simultation with specified scheduling algorithm
        //returns total run time
        simstats simulate();
        
};
